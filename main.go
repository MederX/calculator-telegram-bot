package main

import (
	"context"
	"fmt"
	"log"
	"math"
	"os"
	"os/signal"
	"regexp"
	"strconv"
	"strings"
	"syscall"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	maxExpressionLength = 100
	requestTimeout      = 30 * time.Second
)

// Calculator –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
type Calculator struct {
	supportedOps map[string]func(float64, float64) (float64, error)
}

// NewCalculator —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
func NewCalculator() *Calculator {
	return &Calculator{
		supportedOps: map[string]func(float64, float64) (float64, error){
			"+": func(a, b float64) (float64, error) { return a + b, nil },
			"-": func(a, b float64) (float64, error) { return a - b, nil },
			"*": func(a, b float64) (float64, error) { return a * b, nil },
			"√ó": func(a, b float64) (float64, error) { return a * b, nil },
			"/": func(a, b float64) (float64, error) {
				if b == 0 {
					return 0, fmt.Errorf("–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å")
				}
				return a / b, nil
			},
			"√∑": func(a, b float64) (float64, error) {
				if b == 0 {
					return 0, fmt.Errorf("–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å")
				}
				return a / b, nil
			},
			"^":  func(a, b float64) (float64, error) { return math.Pow(a, b), nil },
			"**": func(a, b float64) (float64, error) { return math.Pow(a, b), nil },
			"%": func(a, b float64) (float64, error) {
				if b == 0 {
					return 0, fmt.Errorf("–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞")
				}
				return math.Mod(a, b), nil
			},
		},
	}
}

// validateExpression –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è
func (c *Calculator) validateExpression(expr string) error {
	if len(expr) > maxExpressionLength {
		return fmt.Errorf("–≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º %d —Å–∏–º–≤–æ–ª–æ–≤)", maxExpressionLength)
	}

	if strings.TrimSpace(expr) == "" {
		return fmt.Errorf("–ø—É—Å—Ç–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	validChars := regexp.MustCompile(`^[0-9+\-*/√ó√∑^%().\s]+$`)
	if !validChars.MatchString(expr) {
		return fmt.Errorf("–≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
	}

	return nil
}

// parseExpression —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏—é
func (c *Calculator) parseExpression(expr string) (float64, string, float64, error) {
	expr = strings.ReplaceAll(expr, " ", "")

	// –ü–æ–∏—Å–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (—Å–Ω–∞—á–∞–ª–∞ –¥–≤—É—Ö—Å–∏–º–≤–æ–ª—å–Ω—ã–µ)
	operators := []string{"**", "√∑", "√ó", "^", "%", "/", "*", "+", "-"}

	for _, op := range operators {
		// –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ - –∏ +, –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–Ω–∞–∫–∞–º–∏ —á–∏—Å–ª–∞
		if op == "-" || op == "+" {
			// –ò—â–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–µ –ø–æ—Å–ª–µ –¥—Ä—É–≥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
			for i := 1; i < len(expr); i++ {
				if string(expr[i]) == op {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞–∫ —á–∏—Å–ª–∞
					prevChar := expr[i-1]
					if prevChar >= '0' && prevChar <= '9' || prevChar == ')' {
						left := expr[:i]
						right := expr[i+1:]
						if right != "" {
							a, err1 := strconv.ParseFloat(left, 64)
							b, err2 := strconv.ParseFloat(right, 64)
							if err1 == nil && err2 == nil {
								return a, op, b, nil
							}
						}
					}
				}
			}
		} else {
			// –î–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
			if idx := strings.Index(expr, op); idx > 0 {
				left := expr[:idx]
				right := expr[idx+len(op):]
				if right != "" {
					a, err1 := strconv.ParseFloat(left, 64)
					b, err2 := strconv.ParseFloat(right, 64)
					if err1 == nil && err2 == nil {
						return a, op, b, nil
					}
				}
			}
		}
	}

	return 0, "", 0, fmt.Errorf("–æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
}

// Calculate –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
func (c *Calculator) Calculate(expr string) (string, error) {
	if err := c.validateExpression(expr); err != nil {
		return "", err
	}

	a, op, b, err := c.parseExpression(expr)
	if err != nil {
		return "", err
	}

	opFunc, exists := c.supportedOps[op]
	if !exists {
		return "", fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: %s", op)
	}

	result, err := opFunc(a, b)
	if err != nil {
		return "", err
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ NaN
	if math.IsInf(result, 0) {
		return "", fmt.Errorf("—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫")
	}
	if math.IsNaN(result) {
		return "", fmt.Errorf("—Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	if result == float64(int64(result)) {
		return fmt.Sprintf("%.0f", result), nil
	}
	return fmt.Sprintf("%.6g", result), nil
}

// BotHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
type BotHandler struct {
	bot        *tgbotapi.BotAPI
	calculator *Calculator
}

// NewBotHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞
func NewBotHandler(bot *tgbotapi.BotAPI) *BotHandler {
	return &BotHandler{
		bot:        bot,
		calculator: NewCalculator(),
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (h *BotHandler) handleMessage(message *tgbotapi.Message) {
	if message == nil || message.Text == "" {
		return
	}

	var reply string
	text := strings.TrimSpace(message.Text)

	// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
	switch {
	case text == "/start":
		reply = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä-–±–æ—Ç.
		
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
‚Ä¢ –°–ª–æ–∂–µ–Ω–∏–µ: +
‚Ä¢ –í—ã—á–∏—Ç–∞–Ω–∏–µ: -
‚Ä¢ –£–º–Ω–æ–∂–µ–Ω–∏–µ: * –∏–ª–∏ √ó
‚Ä¢ –î–µ–ª–µ–Ω–∏–µ: / –∏–ª–∏ √∑
‚Ä¢ –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å: ^ –∏–ª–∏ **
‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è: %

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ 2 + 3
‚Ä¢ 10.5 * 2
‚Ä¢ 16 / 4
‚Ä¢ 2 ^ 3
‚Ä¢ 10 % 3

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ!`

	case text == "/help":
		reply = `üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á–∏—Å–ª–æ –æ–ø–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–æ

–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π:
‚Ä¢ 15 + 25
‚Ä¢ 100 - 50
‚Ä¢ 12.5 * 4
‚Ä¢ 144 / 12
‚Ä¢ 2 ^ 10
‚Ä¢ 17 % 5

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–¥–≤–∞ —á–∏—Å–ª–∞ –∏ –æ–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è)
‚Ä¢ –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ`

	default:
		// –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
		result, err := h.calculator.Calculate(text)
		if err != nil {
			reply = "‚ùå –û—à–∏–±–∫–∞: " + err.Error() + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
		} else {
			reply = "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: " + result
		}
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
	msg := tgbotapi.NewMessage(message.Chat.ID, reply)
	msg.ReplyToMessageID = message.MessageID

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
func (h *BotHandler) Start(ctx context.Context) error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := h.bot.GetUpdatesChan(u)

	log.Println("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

	for {
		select {
		case <-ctx.Done():
			log.Println("üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
			h.bot.StopReceivingUpdates()
			return ctx.Err()

		case update := <-updates:
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã
			go func(upd tgbotapi.Update) {
				defer func() {
					if r := recover(); r != nil {
						log.Printf("–ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", r)
					}
				}()

				h.handleMessage(upd.Message)
			}(update)
		}
	}
}

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		// Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—É–±–µ—Ä–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!)
		botToken = "7566241176:AAHIsMArqeqDEM8LxDv-9Rvh5zPmQCxa2a4"
		log.Println("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN")
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
	if os.Getenv("DEBUG") == "true" {
		bot.Debug = true
	}

	log.Printf("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @%s", bot.Self.UserName)

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
	handler := NewBotHandler(bot)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		if err := handler.Start(ctx); err != nil && err != context.Canceled {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: %v", err)
		}
	}()

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan
	log.Println("üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
	cancel()

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	time.Sleep(2 * time.Second)
	log.Println("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
